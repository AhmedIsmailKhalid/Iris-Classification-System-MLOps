name: Backend CI

on:
  push:
    branches: [ develop, main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ develop, main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Generate Iris dataset
      run: poetry run python scripts/generate_iris_data.py
    
    - name: Train model
      run: poetry run python scripts/train_model.py
    
    - name: Run linting (flake8)
      run: poetry run flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Check code formatting (black)
      run: poetry run black --check src tests
    
    - name: Check import sorting (isort)
      run: poetry run isort --check-only src tests
    
    - name: Run type checking (mypy)
      run: poetry run mypy src --ignore-missing-imports
      continue-on-error: true
    
    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 7
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70
      continue-on-error: true

  lint-summary:
    name: Linting Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Check test job status
      run: |
        if [ "${{ needs.test.result }}" == "failure" ]; then
          echo "❌ Tests failed"
          exit 1
        elif [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All tests passed"
        fi